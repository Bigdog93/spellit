/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 AK_default.glb -t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    CB_default: THREE.Mesh;
  };
  materials: {
    CB_default: THREE.MeshStandardMaterial;
  };
};

export default function CBDefault(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "./models/homeglb/CB_default.glb"
  ) as GLTFResult;

  const magicianRef = useRef<THREE.Mesh>(null);
  useFrame((state, delta) => {
    if (magicianRef.current) {
      magicianRef.current.position.y =
        Math.sin(state.clock.elapsedTime * 1.5) * 0.03;
    }
  });
  return (
    <group {...props} dispose={null} scale={[4.5, 4.5, 4.5]}>
      <mesh
        geometry={nodes.CB_default.geometry}
        material={materials.CB_default}
        rotation={[Math.PI / 2, 0, Math.PI]}
        ref={magicianRef}
      />
    </group>
  );
}
